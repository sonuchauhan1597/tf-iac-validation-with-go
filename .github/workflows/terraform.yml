name: "Terraform AWS CI/CD Pipeline"

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'

jobs:
  localstack-setup:
    name: Setup LocalStack
    uses: ./.github/workflows/localstack.yml

  terraform-lint:
    name: Terraform Lint (TFLint)
    runs-on: ubuntu-latest
    needs: localstack-setup
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      - name: Cache TFLint plugins
        uses: actions/cache@v3
        with:
          path: ~/.tflint.d/plugins
          key: ${{ runner.os }}-tflint-${{ hashFiles('**/.tflint.hcl') }}
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.52.0
      - name: Init TFLint plugins
        run: tflint --init
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Run TFLint
        run: tflint -f compact

  terraform-fmt:
    name: Terraform Format Check
    runs-on: ubuntu-latest
    needs: terraform-lint
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      - name: Terraform fmt
        run: terraform fmt -check

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [terraform-lint, terraform-fmt, localstack-setup]
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      - name: Configure AWS credentials
        run: |
          echo "Using LocalStack credentials"
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.LOCALSTACK_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.LOCALSTACK_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:            ${{ secrets.LOCALSTACK_AWS_REGION }}
      - name: Terraform init
        run: terraform init -input=false \
               -backend-config="bucket=${{ secrets.BUCKET_TF_STATE }}" \
               -backend-config="key=terraform.tfstate" \
               -backend-config="region=${{ secrets.LOCALSTACK_AWS_REGION }}"
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false -out=plan.out

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      - name: Configure AWS credentials
        run: |
          echo "Using LocalStack credentials"
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.LOCALSTACK_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.LOCALSTACK_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:            ${{ secrets.LOCALSTACK_AWS_REGION }}
      - name: Terraform init (apply)
        run: terraform init -input=false \
               -backend-config="bucket=${{ secrets.BUCKET_TF_STATE }}" \
               -backend-config="key=terraform.tfstate" \
               -backend-config="region=${{ secrets.LOCALSTACK_AWS_REGION }}"
      - name: Terraform apply
        run: terraform apply -auto-approve plan.out

  terratest:
    name: Terratest Integration Tests
    runs-on: ubuntu-latest
    needs: terraform-plan
    steps:
      - uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('test/integration/go.sum') }}
      - name: Download Go modules
        working-directory: ./test/integration
        run: go mod download
      - name: Configure AWS credentials for tests
        run: echo "Using LocalStack for integration testing"
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.LOCALSTACK_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.LOCALSTACK_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:            ${{ secrets.LOCALSTACK_AWS_REGION }}
      - name: Run integration tests
        working-directory: ./test/integration
        run: go test -v -timeout 30m